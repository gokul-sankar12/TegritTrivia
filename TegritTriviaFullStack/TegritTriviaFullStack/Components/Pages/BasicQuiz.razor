@page "/basicquiz/{QuizDate}"
@using System.Web
@using System.Text.Json
@using TegritTrivia.Models
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@rendermode InteractiveServer
@inject HttpClient HttpClient
@inject PersistentComponentState PersistentComponentState
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="header-row">
    <h3>Basic Quiz</h3>
    <button class="btn-primary" @onclick="ShowPlayerStatistics">Show Player Statistics</button>
</div>

<AuthorizeView>
    @if (showPlayerStatistics == true)
    {
        // Have front-end for displaying player statistics. Read from userStatistics variable
        <div class="results">
            <h2>Player Statistics for @username!</h2>
            <p>QuizzesSubmitted: @userStatistics?.QuizzesSubmitted</p>
            <p>Average Score: @userStatistics?.AverageScore</p>
            <p>Number of Perfect Quizzes: @userStatistics?.NumPerfectScores</p>
        </div>
    }

    @if (showResults == true)
    {
        <div class="results">
            <h2>Quiz Complete!</h2>
            <p>Correct Answers: @correctAnswers</p>
            <p>Wrong Answers: @(Questions.Results.Count() - correctAnswers)</p>
            <p>Total Score: @correctAnswers out of @Questions.Results.Count()</p>

            @if (submitStatus == false)
            {
                <div class="alert-danger">
                    <p>@(responseContent). Here's what your results would have been!</p>
                </div>
            }
        </div>
    }

    @if (resultsList != null && resultsList.Count() > 0)
    {

        @foreach (var question in resultsList)
        {
            <div class="quiz-container1">
                <p>@HttpUtility.HtmlDecode(question.Question)</p>
                <div class="options">
                    @for (int i=0; i < question.Options.Count(); i++)
                    {
                        var index = HttpUtility.HtmlDecode(question.Options[i]);
                        <button class="@GetOptionClass(index, question, i)" @onclick="() => SelectOption(index, question)" disabled="@(showResults)">
                            @HttpUtility.HtmlDecode(question.Options[i])
                        </button>
                    }
                </div>
            </div>
        }

        <button class="next-button" @onclick="SaveAnswers">Save Answers</button>

        <button class="next-button" @onclick="ShowResults">Show Results</button>
    }
    else
    {
        <p>Loading Quiz...</p>
    }

    @if (Questions == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <ul>
            @foreach (var question in Questions.Results)
            {
                <li>

                    <strong>@(HttpUtility.HtmlDecode(question.Question))</strong><br />
                    Correct Answer: @question.Correct_Answer
                    @foreach (var options in question.Options)
                    {
                        <p>@options</p>
                    }
                </li>
            }
        </ul>
    }
</AuthorizeView>

@code {
    [Parameter]
    public string QuizDate { get; set; }

    private string name = "Document Data List";
    private string username = String.Empty;
    private PersistingComponentStateSubscription persistingSubscription;
    // private int currentQuestionIndex = 0;
    private string selectedOption = string.Empty;
    private bool isAnswered = false;
    private int correctAnswers = 0;
    private bool showResults = false;
    private bool submitStatus = false;
    private string? responseContent = string.Empty;
    private bool showPlayerStatistics = false;
    private UserStatistics? userStatistics;

    // Attempt at calling Open Trivia Database API to generate questions
    private TriviaResponse Questions;
    private List<TriviaResults> resultsList = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            username = user.Identity.Name;

            // Call post request to CreateNewQuiz_HttpTrigger to create a new quiz if one doesn't exist
            var response = await HttpClient.PostAsync("https://createnewquiz20250729101511.azurewebsites.net/api/createNewQuiz?", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Quiz created successfully: " + result);
            }
            else
            {
                Console.WriteLine("Failed to create quiz: " + response.StatusCode);
            }
        }
        else
        {
            username = string.Empty;
        }

        persistingSubscription = PersistentComponentState.RegisterOnPersisting(PersistData);

        if (PersistentComponentState.TryTakeFromJson<TriviaResponse>(name, out var persistedList))
        {
            Questions = persistedList;
            resultsList = Questions.Results?.ToList() ?? new List<TriviaResults>();
        }
        else
        {
            if (Questions == null)
            {
                Console.WriteLine(QuizDate);

                // Call with test date for testing [API for TEST]
                TriviaResponse triviaResponse = await HttpClient.GetFromJsonAsync<TriviaResponse>($"http://getquizbydate-eye3b0e0ctambwey.centralus-01.azurewebsites.net/api/quiz?date={QuizDate}");

                // Call GetUserAnswers Azure Function to get user selected UserOptions [TEST]
                Console.WriteLine($"http://localhost:7279/api/username/quiz/get?username={username}&date={QuizDate}");
                Console.WriteLine($"https://useranswerfunc.azurewebsites.net/api/username/quiz/get?username={username}&date={QuizDate}");
                string JsonEncodedUserOptions = await HttpClient.GetFromJsonAsync<string>($"https://useranswerfunc.azurewebsites.net/api/username/quiz/get?username={username}&date={QuizDate}");

                if (triviaResponse == null)
                {
                    Console.WriteLine("No triviaRepsonse found");
                }
                else
                {
                    Console.WriteLine("Questions is not null");
                    Questions = triviaResponse;
                    Console.WriteLine(Questions.Id + Questions.ResponseCode);
                    resultsList = Questions.Results?.ToList() ?? new List<TriviaResults>();

                    List<string> UserOptions;

                    if (string.IsNullOrWhiteSpace(JsonEncodedUserOptions) || JsonEncodedUserOptions == "\"[]\"")
                    {
                        UserOptions = new List<string>();
                    }
                    else
                    {
                        UserOptions = JsonSerializer.Deserialize<List<string>>(JsonEncodedUserOptions);
                    }

                    if (UserOptions != null && UserOptions.Count() == resultsList.Count())
                    {
                        Console.WriteLine("Entered if condition");
                        for (int i = 0; i < resultsList.Count(); i++)
                        {
                            resultsList[i].SelectedOption = UserOptions[i];
                            Console.WriteLine(resultsList[i].SelectedOption);
                        }
                    }

                    Console.WriteLine($"Loaded {resultsList.Count} questions.");
                    StateHasChanged();
                }
            }
        }
    }

    private Task PersistData()
    {
        PersistentComponentState.PersistAsJson(name, Questions);
        return Task.CompletedTask;
    }

    private void Dispose()
    {
        persistingSubscription.Dispose();
    }

    private void SelectOption(string option, TriviaResults question)
    {
        var index = resultsList.FindIndex(x => x.Equals(question));

        selectedOption = option;
        resultsList[index].SelectedOption = option;
        isAnswered = true;
    }

    // private void NextQuestion()
    // {
    //     currentQuestionIndex++;
    //     selectedOption = resultsList[currentQuestionIndex].SelectedOption == null ? string.Empty : resultsList[currentQuestionIndex].SelectedOption;
    //     isAnswered = false;
    // }

    // private void PreviousQuestion()
    // {
    //     currentQuestionIndex--;
    //     selectedOption = resultsList[currentQuestionIndex].SelectedOption;
    //     isAnswered = false;
    // }

    private async Task ShowResults()
    {
        // currentQuestionIndex = Questions.Results.Count();
        showResults = true;

        foreach (var question in Questions.Results)
        {
            if (question.Correct_Answer == question.SelectedOption)
            {
                correctAnswers++;
            }
        }

        // Call Function to Update UserStatistics

        var userOptions = resultsList.Select(r => r.SelectedOption ?? "").ToList();

        var payload = new UpdateUserAnswersRequest
        {
            Username = username,
            Date = QuizDate,
            UserOptions = userOptions
        };

        var response = await HttpClient.PutAsJsonAsync("https://useranswerfunc.azurewebsites.net/api/username/quiz/useroptions/submit?", payload);
        responseContent = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            // Handle success
            Console.WriteLine("UserOptions updated and UserQuiz successfully submitted");

            var payload1 = new UpdateUserStatisticsRequest
            {
                Username = username,
                Date = QuizDate,
                CorrectAnswers = correctAnswers
            };
            var response1 = await HttpClient.PutAsJsonAsync("https://useranswerfunc.azurewebsites.net/api/username/quiz/updateStatistics?", payload1);

            submitStatus = true;
        }
        else
        {
            // Handle error
            Console.WriteLine("Error submitting UserQuiz");
            submitStatus = false;
        }
    }

    private string GetOptionClass(string option, TriviaResults question, int index)
    {
        var resultsIndex = resultsList.FindIndex(x => x.Equals(question));

        if (showResults == false)
        {
            if (option == resultsList[resultsIndex].SelectedOption)
            {
                return "option selected";
            }
        }
        else
        {
            if (index == resultsList[resultsIndex].Options.IndexOf(resultsList[resultsIndex].Correct_Answer))
            {
                return "option correct";
            }

            if (index == resultsList[resultsIndex].Options.IndexOf(resultsList[resultsIndex].SelectedOption))
            {
                return "option wrong";
            }
        }

        return "option";
    }

    public class UpdateUserAnswersRequest
    {
        public string Username { get; set; }
        public string Date { get; set; }
        public List<string> UserOptions { get; set; }
    }

    public class UpdateUserStatisticsRequest
    {
        public string Username { get; set; }
        public string Date { get; set; }
        public int CorrectAnswers { get; set; }
    }

    public class UserStatistics
    {
        public long QuizzesSubmitted { get; set; }
        public double AverageScore { get; set; }
        public long NumPerfectScores { get; set; }
    }

    private async Task SaveAnswers()
    {
        foreach (var word in resultsList)
        {
            Console.WriteLine(word.SelectedOption);
        }
        
        var userOptions = resultsList.Select(r => r.SelectedOption ?? "").ToList();

        Console.WriteLine(userOptions);

        var payload = new UpdateUserAnswersRequest
        {
            Username = username,
            Date = QuizDate,
            UserOptions = userOptions
        };

        var response = await HttpClient.PutAsJsonAsync("https://useranswerfunc.azurewebsites.net/api/username/quiz/useroptions?", payload);
        // var response = await HttpClient.PutAsJsonAsync("http://localhost:7279/api/username/quiz/useroptions", payload);

        if (response.IsSuccessStatusCode)
        {
            // Handle success
            Console.WriteLine("UserOptions successfully saved");
        }
        else
        {
            // Handle error
            Console.WriteLine("Error saving UserOptions");
        }
    }

    private async Task ShowPlayerStatistics()
    {
        if (showPlayerStatistics)
        {
            showPlayerStatistics = false;
        }
        else
        {
            var payload = new UpdateUserStatisticsRequest
            {
                Username = username,
                Date = QuizDate,
                CorrectAnswers = 0,
            };

            try
            {
                userStatistics = await HttpClient.GetFromJsonAsync<UserStatistics>(
                    $"https://useranswerfunc.azurewebsites.net/api/username/userstatistics?username={username}");

                if (userStatistics == null)
                {
                    Console.WriteLine("Error grabbing UserStatistics. userStatistics variable is null");
                }

                showPlayerStatistics = true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching UserStatistics: {ex.Message}");
            }
        }
    }
}
